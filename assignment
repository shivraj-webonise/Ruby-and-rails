
require 'date'

#1) Compute the sum of cubes for a given range a through b. Write a method called sum_of_cubes to accomplish this task. Example Given range 1 to 3 the method should return 36.


def sum_Of_Cubes(num)
    num ** 3
end

puts(" Enter a range")

a = gets.chomp().to_i
b = gets.chomp().to_i
result = 0
for index  in a..b
    result += sum_Of_Cubes(index)
end

puts result


#-------------------------------------------------------------------



#2) Given an Array, return the elements that are present exactly once in the array. You need to write a method called non_duplicated_values to accomplish this task. Example: Given [1,2,2,3,3,4,5], the method should return [1,4,5].

arr = [1,2,2,4,5,6,6]
res = Array.new
for num in arr
    if arr.count(num) == 1
        res.push(num)
    end
end

puts res


#--------------------------------------------------------------------------------------------



#3) Given a sentence, return true if the sentence is a palindrome. You are supposed to write a method palindrome? to accomplish this task.
#Note Ignore whitespace and cases of characters. Example: Given ""Never odd or even"" the method should return true.

puts "Enter sentence"

sentence = gets.chomp().delete(' ').downcase

puts sentence == sentence.reverse
#---------------------------------------------------------


#4) 9 is a Kaprekar number since 9 ^ 2 = 81 and 8 + 1 = 9, 297 is also Kaprekar number since 297 ^ 2 = 88209 and 88 + 209 = 297. In short, for a Kaprekar number k with n-digits, if you square it and add the right n digits to the left n or n-1 digits, the resultant sum is k.
# Find if a given number is a Kaprekar number.

def kaprekar(num)
    ks = num**2
    lenf = (ks.to_s.length)-1
    lenh = (ks.to_s.length / 2) - 1
    a = ks.to_s[0..lenh].to_i
    b = ks.to_s[lenh+1..lenf].to_i
    num == (a+b)
  end

  puts "Enter a number"
  num = gets.chomp().to_i
  puts kaprekar(num)


  #-------------------------------------




#5) Find occurance of RUBY from string 1.


str = "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.
"

words = str.split(" ")

puts str.count("RUBY")

#---------------------------------------------------------------------------

#6) Find the position where RUBY occures in the string 1.




str = "parses RUBY a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
puts str.index("RUBY")



#----------------------------------------------------------------------------





#7) Create array of words in string 1 & print them using a recursive function.

str = "RUBY parse a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."

words = str.split(" ")


def print_recursive(words , index)
    if index == words.length
        return
    end
     print (words[index] + " ") 

    print_recursive(words,index+1)
end

print_recursive(words,0)


#----------------------------------------------------------------------------------------------------------------------------------

#8) Capitalise string 1

puts str.upcase

#-------------------------------------------------------------------------------------------------------------------------------------

# 9) Combine string 1 & 2.

str2 = "RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."

puts str + str2


#-------------------------------------------------------------------------------------------------------------------------------------
# 10) Print current date.

current_time = Time.new.to_date
puts current_time

#----------------------------------------------------------------------------------------------------------------------

#11) print 12th Jan 2012


puts current_time.strftime "%dth %m %Y"

#---------------------------------------------------------------------------------------------------------------------------------- 


#12) add 7 days in current date

d = Date.today

puts (d+7).to_s


#13) Cut the string 1 into 4 parts & print it.

puts str.split(" ").to_a.each_slice(4).to_a


#-----------------------------------------------------------------------------------------------------------------------------------


str = "RUBY parse a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
str2 = "RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."

#14) Divide the string 1 by occurances of '.'. Combine the array in reverse word sequence

puts str.split(".").reverse

#------------------------------------------------------------------------------

#15) Remove the HTML characters from string.

puts str.gsub(/<\/?[^>]*>/, "")
#------------------------------------------------------------------------------

#16) Print the 'RUBY' word from string 1 by traversing it using string functions

str.scan(/[\w']+/) do |word| 
    if word.eql? "RUBY"
       puts word
    end
end

#------------------------------------------------------------------------------
#17) Find the length of string 1 & 2.

str11 = gets.chomp()
str12 = gets.chomp()
puts str.length
puts str2.length

#------------------------------------------------------------------------------
#18) Compare two dates. (12-04-2010 & 12-05-2011). Calculate the days between these two dates.


puts (Time.mktime(2011,05,12) - Time.mktime(2010,04,12)).to_i / (24 * 60 * 60)

#--------------------------------------------------------------------------------


#19) Print date after 20 days from current date

puts (Time.now + (60*60*24*20)).strftime("%d/%m/%Y")

#-----------------------------------------------------------------------

#20) Print date in array format.

temp =  Time.new.to_date.to_s.split("-").to_a

puts temp


#----------------------------------------------------------------------------------


#21. Print prime numbers from the given array


def is_prime?(number)
    return false if number <2
     (2..Integer.sqrt(number)).each do |divisor|
           return false if number % divisor == 0
end
  return number
end

def read_array(array)
  primes = []
array.each do |num|
    primes << num if is_prime?(num)
end
return primes
end


array = Array.new
 array = [3,9,10,7,11,15,17]

 puts read_array(array)

 #---------------------------------------------------------------------------------

 #------------------------------------------------------------------------------------------------------------------
#22. Write a program for fuel indication.


def fuel_Indication(fuel)
    case fuel
    when 0
        return "Out of Fuel"
    
    when (1..10)
        return "Low Please Fill"
    
    when (11..30)
        return "Good for Now"
    
    when (31...50)
        return "Almost Full"
    
    when 50
        return "Full"
    end

end

puts fuel_Indication(5)


#------------------------------------------------------------------------------------------------------------------

#23. Swap the given values(without the third variable)


def swap(a,b)
    a = a+b
    b = a-b
    a = a-b
    return a,b
end

x = gets.chomp().to_i
y = gets.chomp().to_i
puts x,y

x,y = swap(x,y)

puts x,y

#------------------------------------------------------------------------------------------------------------------

#24. Program to Randomly Select an Element From the Array

arr = Array.new
arr = [10,20,4,3,2,9]

puts arr.sample

#----------------------------------------------------------------------------------------------------------------------

#25. Program to Count the Number of Each Vowel

str = "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."


arr = {}
for index in 0...str.length
    case str[index]
    when 'a'
        arr[str[index]] = arr[str[index]].to_i + 1
    when 'e'
        arr[str[index]] = arr[str[index]].to_i + 1
    when 'i'
        arr[str[index]] = arr[str[index]].to_i + 1
    when 'o'
        arr[str[index]] = arr[str[index]].to_i + 1
    when 'u'
        arr[str[index]] = arr[str[index]].to_i + 1
    end
end

puts arr

#------------------------------------------------------------------------------------------------------------------------

#26. Program to Sort a Hash by Value


puts arr.sort_by {|key,val| val}.to_h

#----------------------------------------------------------------------------------------------------------------------

#27. Program to Convert Two Arrays Into a Hash



keys = [1, 2, 3]
values = ['a', 'b', 'c']
temp = Hash[keys.zip(values)]

puts temp

#----------------------------------------------------------------------------------------------------------------------

